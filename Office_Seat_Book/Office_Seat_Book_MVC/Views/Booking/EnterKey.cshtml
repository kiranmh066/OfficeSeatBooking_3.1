@model Office_Seat_Book_Entity.SecretKey;
@{
    Layout = "~/Views/Shared/_Layout1.cshtml";
}


<body>
    <div class="mask bg-gradient-primary">
        <img class="img" src="https://demos.creative-tim.com/marketplace/soft-ui-design-system-pro/assets/img/curved-images/curved1.jpg" alt="img">
   <div class="container">
        <header>
            <i class="bx bxs-check-shield"></i>
        </header>
        <h4>Enter Your OTP Code</h4>
        <form method="post" enctype="multipart/form-data">
            <div class="input-field">
                <input asp-controller="Booking" asp-for="SpecialKey" type="text" />
                <input asp-controller="Booking" asp-for="Employee.Name" type="text" disabled />
                <input asp-controller="Booking" asp-for="Employee.Email" type="text" disabled />
                <input asp-controller="Booking" asp-for="Employee.Password" type="text" disabled />
            </div>
            <button type="submit">Submit</button>
        </form>
            @if (ViewBag.status == "Ok")

            {

                <script>

                    window.alert("Success! @ViewBag.message");

                </script>

            }

            else if (ViewBag.status == "Error")

            {

                <script>

                    window.alert("Error! @ViewBag.message");

                </script>

            }
        </div>
    </div>
    
    <script>
        const inputs = document.querySelectorAll("input"),
            button = document.querySelector("button");

        inputs.forEach((input, index1) => {
            input.addEventListener("keyup", (e) => {

                const currentInput = input,
                    nextInput = input.nextElementSibling,
                    prevInput = input.previousElementSibling;

                // if the value has more than one character then clear it
                if (currentInput.value.length > 1) {
                    currentInput.value = "";
                    return;
                }
                // if the next input is disabled and the current value is not empty
                //  enable the next input and focus on it
                if (nextInput && nextInput.hasAttribute("disabled") && currentInput.value !== "") {
                    nextInput.removeAttribute("disabled");
                    nextInput.focus();
                }

                // if the backspace key is pressed
                if (e.key === "Backspace") {
                    // iterate over all inputs again
                    inputs.forEach((input, index2) => {
                        // if the index1 of the current input is less than or equal to the index2 of the input in the outer loop
                        // and the previous element exists, set the disabled attribute on the input and focus on the previous element
                        if (index1 <= index2 && prevInput) {
                            input.setAttribute("disabled", true);
                            input.value = "";
                            prevInput.focus();
                        }
                    });
                }
                //if the fourth input( which index number is 3) is not empty and has not disable attribute then
                //add active class if not then remove the active class.
                if (!inputs[3].disabled && inputs[3].value !== "") {
                    button.classList.add("active");
                    return;
                }
                button.classList.remove("active");
            });
        });

        //focus the first input which index is 0 on window load
        window.addEventListener("load", () => inputs[0].focus());



    </script>
</body>
<style>
    * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
}

body{
    min-height:100vh;
    align-items: center;
    justify-content: center;
}
.img{
    position: absolute;
    background-size: cover;
    background-repeat: no-repeat;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.4;
  }
  .mask {
    position:absolute;
    background-size: cover;
    top: 0;
    width: 100%;
    height: 70%;
}
.bg-gradient-primary {
    background-image: linear-gradient(310deg,#7928ca,#ff0080);
    height:70%;
    width: 100%;
    opacity: 1;
}
.container, form, .input-field, header {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
.container {
  background:aliceblue;
  padding: 30px 65px;
  border-radius: 15px;
  box-shadow: 0 5px 10px 5px rgba(0, 0, 0, 0.1);
  border: 2px double black;
  width:fit-content;
  margin:300px auto;
  position:relative;
}

.container header {
  height: 65px;
  width: 65px;
  background: #28b475;
  color: #fff;
  font-size: 2.5rem;
  border-radius: 50%;
  border: 2px double black;
}
.container h4 {
  font-size: 1.25rem;
  color: #333;
  font-weight: 500;
}
form .input-field {
  flex-direction: row;
  column-gap: 10px;
}
.input-field input {
  height: 45px;
  width: 42px;
  border-radius: 6px;
  outline: none;
  font-size: 1.125rem;
  text-align: center;
  border: 1px solid black;
}
.input-field input:focus {
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
}
.input-field input::-webkit-inner-spin-button,
.input-field input::-webkit-outer-spin-button {
  display: none;
}
form button {
  margin-top: 25px;
  width: 100%;
  color: #efeeee;
  font-size: 1rem;
  border: none;
  padding: 9px 0;
  cursor: pointer;
  border-radius: 6px;
  pointer-events: none;
  background: grey;
  
}
form button.active {
  background:green;
  pointer-events: auto;
}
form button:hover {
  background:rgb(54, 151, 41);
  transition: background-color 0.5s ease;
}
.container {
  animation: fade-in 3s forwards;
}

keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
/* .container header:hover {
  transform: scale(1.1);
  transition: transform 0.5s ease;
} */

.container header:active {
  transform: rotate(360deg);
  transition: transform 1s ease;
}

form button {
  animation: pulse 2s infinite;
}



</style>